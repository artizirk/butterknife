#!/usr/bin/python3
# encoding: utf-8

import subprocess
import os
import falcon
import unicodedata
import shutil
import stat
import json
import re
from time import sleep
from datetime import datetime, date
import pwd

try:
    name, _, uid, gid, gecos, root, shell = pwd.getpwnam("butterknife")
    # Make sure you have username butterknife
    # And you have following in /etc/sudoers.d/butterknife:
    # butterknife ALL=(ALL) NOPASSWD: /sbin/btrfs send /var/butterknife/pool/*
except KeyError:
    name = uid = gid = gecos = shell = None
    root = "/var/butterknife/pool"

class MyEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, datetime):
            return obj.strftime('%Y-%m-%dT%H:%M:%S.%f')[:-3] + "Z"
        if isinstance(obj, date):
            return obj.strftime('%Y-%m-%d')
        if isinstance(obj, map):
            return tuple(obj)
        return json.JSONEncoder.default(self, obj)

def serialize(func):
    """
    Falcon response serialization
    """
    def wrapped(instance, req, resp, **kwargs):
        assert not req.get_param("unicode") or req.get_param("unicode") == u"âœ“", "Unicode sanity check failed"
        
        # Default to no caching of API calls
        resp.set_header("Cache-Control", "no-cache, no-store, must-revalidate");
        resp.set_header("Pragma", "no-cache");
        resp.set_header("Expires", "0");

        r = func(instance, req, resp, **kwargs)

        if not resp.body:
            if not req.client_accepts_json:
                raise falcon.HTTPUnsupportedMediaType(
                    'This API only supports the JSON media type.',
                    href='http://docs.examples.com/api/json')
            resp.set_header('Content-Type', 'application/json')
            resp.body = json.dumps(r, cls=MyEncoder)
        return r
        
    # Pipe API docs
    wrapped._apidoc = getattr(func, "_apidoc", {})
    wrapped.__doc__ = func.__doc__
    return wrapped

class TemplateResource(object):
    @serialize
    def on_get(self, req, resp):
        def list_templates():
            for entry in os.listdir(root):
                if entry.startswith("@template:"):
                    _, fqn, arch, version = entry.split(":")
                    yield tuple(fqn.rsplit(".", 1))

                    
        return {"templates": map(
            lambda ab:{"namespace": ab[0], "identifier":ab[1]},
            set(list_templates()))}

class VersionResource(object):
    @serialize
    def on_get(self, req, resp, name, arch):
        def list_versions():
            for entry in os.listdir(root):
                if entry.startswith("@template:"):
                    _, fqn, a, version = entry.split(":")

                    if name == fqn and arch == a:
                        yield version
 
        return { "versions": map(
            lambda v:{"identifier":v},
            sorted(list_versions(), reverse=True, key=lambda j:int(j[4:]))) }

class StreamingResource(object):
    def on_get(self, req, resp, name, arch, version):
        snapshot = "@template:%(name)s:%(arch)s:%(version)s" % locals()
        
        sources = req.get_param("src")
        suggested_filename = "%(name)s:%(arch)s:%(version)s" % locals()
        if sources:
            suggested_filename += "_from_" + sources.replace(",", "_")
        suggested_filename += ".far"

        path = os.path.join(root, snapshot.replace("/", ""))
        resp.set_header("Content-Disposition", "attachment; filename=\"%s\"" % suggested_filename)
        resp.set_header('Content-Type', 'application/btrfs-stream')
        
        cmd = "/sbin/btrfs", "send", path
        
        if uid:
            cmd = ("sudo",) + cmd
            
        if sources:
            for source in sources.split(","):
                print("parsing:", source)
                if not source:
                    continue
                snapshot = "@template:%(name)s:%(arch)s:%(source)s" % locals()
                cmd += ("-c", os.path.join(root, snapshot.replace("/", "")))
        print("Executing:", " ".join(cmd))
        streamer = subprocess.Popen(cmd, stdout=subprocess.PIPE)
        resp.stream = streamer.stdout

app = falcon.API()
app.add_route("/api/template/", TemplateResource())
app.add_route("/api/template/{name}/arch/{arch}/version/", VersionResource())
app.add_route("/api/template/{name}/arch/{arch}/version/{version}/stream/", StreamingResource())

if __name__ == '__main__':
    from wsgiref.simple_server import make_server, WSGIServer
    from socketserver import ThreadingMixIn

    class ThreadingWSGIServer(ThreadingMixIn, WSGIServer): 
        pass

    httpd = make_server('0.0.0.0', 8000, app, ThreadingWSGIServer)
    if uid:
        print("Dropping privileges...")
        os.setuid(uid)
    httpd.serve_forever()

